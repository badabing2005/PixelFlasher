#
# Copyright (C) 2025 Badabing2005
# SPDX-FileCopyrightText: 2025 Badabing2005
# SPDX-License-Identifier: AGPL-3.0-or-later
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License
# for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# Also add information on how to contact you by electronic and paper mail.
#
# If your software can interact with users remotely through a computer network,
# you should also make sure that it provides a way for users to get its source.
# For example, if your program is a web application, its interface could
# display a "Source" link that leads users to an archive of the code. There are
# many ways you could offer source, and different solutions will be better for
# different programs; see section 13 for the specific requirements.
#
# You should also get your employer (if you work as a programmer) or school, if
# any, to sign a "copyright disclaimer" for the program, if necessary. For more
# information on this, and how to apply and follow the GNU AGPL, see
# <https://www.gnu.org/licenses/>.

name: Build AppImage

on:
  workflow_call:
  workflow_dispatch:
    inputs:
      tags:
        description: 'Build tags'

jobs:
  build_appimage:
    # Use an older Ubuntu for better compatibility with older systems
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        run: |
          sudo apt update
          sudo apt install software-properties-common -y
          sudo add-apt-repository ppa:deadsnakes/ppa -y
          sudo apt update
          sudo apt install -y python3.9
          sudo apt install -y python3.9-venv
          sudo apt install -y python3-pip
          python3.9 --version

      - name: Install wxPython prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y python3.9-dev
          sudo apt-get install -y libgtk-3-dev
          sudo apt-get install -y libunwind-dev
          sudo apt-get install -y libgstreamer1.0-dev
          sudo apt-get install -y gstreamer1.0-plugins-base
          sudo apt-get install -y freeglut3-dev
          sudo apt-get install -y libwebkit2gtk-4.0-dev
          sudo apt-get install -y libjpeg-dev
          sudo apt-get install -y libpng-dev
          sudo apt-get install -y libtiff-dev
          sudo apt-get install -y libsdl2-dev
          sudo apt-get install -y libnotify-dev
          sudo apt-get install -y libsm-dev
          # Install tools needed for AppImage creation
          sudo apt-get install -y patchelf curl zsync

      - name: Create virtual environment and install dependencies
        run: |
          python3.9 -m venv myenv
          . myenv/bin/activate
          python --version
          pip install -U pip
          pip install -U six wheel setuptools
          # Try wxPython 4.2.2 wheel, then 4.2.1 wheel, finally fallback to source if both fail
          pip install --only-binary wxPython -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-20.04 wxPython==4.2.2 || \
          pip install --only-binary wxPython -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-20.04 wxPython==4.2.1 || \
          pip install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-20.04 wxPython
          pip install -r requirements.txt
          # Install python-appimage
          pip install python-appimage
          python --version && pip freeze
        shell: bash

      - name: Create AppImage configuration
        run: |
          # Get version from build.sh
          VERSION=$(grep -m1 "VERSION=" build.sh | cut -d'=' -f2 || echo "1.0.0")

          # Create appimage configuration file
          cat > appimage.yml << EOF
          app: PixelFlasher
          binary: PixelFlasher
          script: PixelFlasher.py
          version: ${VERSION}
          icon: images/icon-dark-256.png
          categories: Utility;Development
          extra_data:
            - images/
            - bin/
            - android_versions.json
            - android_devices.json
            - testkey_rsa4096.pem
          binaries:
            - bin/7zzs
          hidden_imports:
            - _cffi_backend
          EOF
        shell: bash

      - name: Create .desktop file
        run: |
          mkdir -p dist
          cat > PixelFlasher.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=PixelFlasher
          Comment=Android Flashing Tool
          Exec=PixelFlasher
          Icon=pixelflasher
          Categories=Utility;Development;
          Terminal=false
          EOF
        shell: bash

      - name: Install AppImage tools
        run: |
          sudo apt-get update
          sudo apt-get install -y wget fuse
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool
          chmod +x appimagetool
          sudo mv appimagetool /usr/local/bin/
        shell: bash

      - name: Build AppImage with appimagetool
        run: |
          . myenv/bin/activate

          # Get version from build.sh
          VERSION=$(grep -m1 "VERSION=" build.sh | cut -d'=' -f2 || echo "1.0.0")
          echo "Building AppImage for version: ${VERSION}"

          # Create a temporary directory for source files
          mkdir -p tmp_src

          # Copy needed files to the temporary directory, excluding AppDir
          cp -r *.py *.json *.pem *.sh *.desktop images/ bin/ LICENSE README.md tmp_src/

          # Create AppDir structure
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          mkdir -p AppDir/usr/lib/python3.9/site-packages
          mkdir -p AppDir/usr/src/pixelflasher

          # Create a lib directory for shared libraries
          mkdir -p AppDir/usr/lib/x86_64-linux-gnu/

          # Copy the entire Python standard library
          mkdir -p AppDir/usr/lib/python3.9
          cp -r /usr/lib/python3.9/* AppDir/usr/lib/python3.9/
          cp $(which python3.9) AppDir/usr/bin/python3

          # Install Python dependencies
          echo "Installing packages to site-packages directory"
          mkdir -p AppDir/usr/lib/python3.9/site-packages
          . myenv/bin/activate
          pip install -r requirements.txt --target=AppDir/usr/lib/python3.9/site-packages || { echo "ERROR: Package installation failed!"; exit 1; }

          # Copy wxPython manually from venv if needed
          echo "Copying wxPython from virtual environment if needed"
          if [ ! -d "AppDir/usr/lib/python3.9/site-packages/wx" ]; then
            echo "wxPython not found in target, copying from venv"
            cp -r myenv/lib/python3.9/site-packages/wx* AppDir/usr/lib/python3.9/site-packages/ || echo "WARNING: wxPython copy failed"
          fi

          # Copy required shared libraries for wxPython
          echo "Copying required shared libraries for wxPython"
          sudo apt-get install -y libnotify4 libgstreamer1.0-0 libwebkit2gtk-4.0-37 \
            libsdl2-2.0-0 libjpeg-turbo8 libpng16-16 libtiff5 \
            libgtk-3-0 libsm6 libwxgtk3.0-gtk3-0v5

          # Copy shared libraries to the AppDir
          for lib in libnotify.so.4 libgstreamer-1.0.so.0 libwebkit2gtk-4.0.so.37 \
            libgtk-3.so.0 libgdk-3.so.0 libpango-1.0.so.0 libgobject-2.0.so.0 \
            libglib-2.0.so.0 libcairo.so.2 libsm.so.6 libwx_gtk3u_core-3.0.so.0; do
            find /usr/lib -name $lib -exec cp -v {} AppDir/usr/lib/x86_64-linux-gnu/ \; || echo "WARNING: Could not find $lib"
          done

          # Copy the source files to AppDir from temp directory
          cp -r tmp_src/* AppDir/usr/src/pixelflasher/

          # Copy icon
          cp images/icon-dark-256.png AppDir/usr/share/icons/hicolor/256x256/apps/pixelflasher.png

          # Create entry point script using appdir-relative paths
          cat > AppDir/usr/bin/pixelflasher << EOF
          #!/bin/bash
          # Use relative paths within the AppImage
          THIS_DIR=\$(dirname "\$(readlink -f "\$0")")
          APPDIR=\$(dirname "\$(dirname "\$THIS_DIR")")
          cd "\$APPDIR/usr/src/pixelflasher"
          export PYTHONHOME="\$APPDIR/usr"
          export PYTHONPATH="\$APPDIR/usr/lib/python3.9/site-packages:\$APPDIR/usr/lib/python3.9"
          export LD_LIBRARY_PATH="\$APPDIR/usr/lib/x86_64-linux-gnu:\$LD_LIBRARY_PATH"
          exec "\$APPDIR/usr/bin/python3" PixelFlasher.py "\$@"
          EOF
          chmod +x AppDir/usr/bin/pixelflasher

          # Create AppRun file
          cat > AppDir/AppRun << EOF
          #!/bin/bash
          # Get the directory where the AppImage is mounted
          HERE="\$(dirname "\$(readlink -f "\$0")")"

          # Set environment variables
          export PATH="\$HERE/usr/bin:\$PATH"
          export PYTHONHOME="\$HERE/usr"
          export PYTHONPATH="\$HERE/usr/lib/python3.9/site-packages:\$HERE/usr/lib/python3.9"
          export LD_LIBRARY_PATH="\$HERE/usr/lib/x86_64-linux-gnu:\$LD_LIBRARY_PATH"

          # Execute the entry point
          exec "\$HERE/usr/bin/pixelflasher" "\$@"
          EOF
          chmod +x AppDir/AppRun

          # Copy .desktop file to correct location
          cp PixelFlasher.desktop AppDir/usr/share/applications/

          # Fix the Exec line in the .desktop file to use the correct path
          sed -i 's|Exec=PixelFlasher|Exec=pixelflasher|g' AppDir/usr/share/applications/PixelFlasher.desktop

          # Create symlink in root AppDir
          ln -sf usr/share/applications/PixelFlasher.desktop AppDir/
          ln -sf usr/share/icons/hicolor/256x256/apps/pixelflasher.png AppDir/

          # Create AppImage
          mkdir -p dist
          ARCH=x86_64 /usr/local/bin/appimagetool AppDir dist/PixelFlasher-x86_64.AppImage

          # Generate SHA256 checksum
          cd dist
          sha256sum PixelFlasher-x86_64.AppImage > PixelFlasher-x86_64.AppImage.sha256
          cat PixelFlasher-x86_64.AppImage.sha256
          ls -la
        shell: bash

      # Upload artifacts
      - name: Upload AppImage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: PixelFlasher AppImage
          path: |
            dist/PixelFlasher-*.AppImage
            dist/PixelFlasher-*.AppImage.sha256
